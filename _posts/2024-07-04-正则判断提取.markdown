---
layout:     post
title:      "正则判断提取"
subtitle:   ""
date:       2024-07-04
author:     " Shallow Dreamer"
header-img: "img/post-bg-js-version.jpg"
tags:
    - re
---

为了处理不同的格式，我们可以使用稍微复杂一点的正则表达式来分别匹配 `thru`、`fext` 和 `next` 的不同模式。以下是更新后的 Python 脚本，能够根据指定格式匹配并提取信息：

```python
import re

def match_and_extract_info(filename):
    # 定义正则表达式模式
    pattern_thru = re.compile(
        r'\[thru_([^_]+)_(up|down)\]_.*\.s\*p'
    )
    pattern_fext_next = re.compile(
        r'\[(fext|next)_v_([^_]+)_a_([^_]+)_(up|down)\]\.s\*p'
    )
    
    # 尝试匹配 thru 格式
    match_thru = pattern_thru.match(filename)
    if match_thru:
        return {
            'type': 'thru',
            'identifier': match_thru.group(1),
            'direction': match_thru.group(2),
            'valid': True
        }

    # 尝试匹配 fext 和 next 格式
    match_fext_next = pattern_fext_next.match(filename)
    if match_fext_next:
        return {
            'type': match_fext_next.group(1),
            'identifier_v': match_fext_next.group(2),
            'identifier_a': match_fext_next.group(3),
            'direction': match_fext_next.group(4),
            'valid': True
        }

    return {
        'valid': False
    }

# 测试字符串
test_strings = [
    '[thru_rx1_up]_xxx.s*p',
    '[fext_v_v1_a_a1_up].s*p',
    '[next_v_v1_a_a1_up].s*p',
    '[thru_test]_test.s*p',
    '[invalid]_test.s*p',
    '[next_v_rx2_a_a2_down].s*p',
    '[fext_v_a1_a2_up].s*p',
    '[thru_abcd_up]_xxx.s*p',
    '[fext_v_xyz_a_abc_down].s*p'
]

# 运行测试
for s in test_strings:
    result = match_and_extract_info(s)
    print(f"{s}: {result}")
```

### 解释

1. **正则表达式**：
   - `pattern_thru`：
     - `r'\[thru_([^_]+)_(up|down)\]_.*\.s\*p'`
       - `\[thru_`：匹配 `[thru_`。
       - `([^_]+)`：匹配一个或多个非下划线字符的标识符。
       - `_(up|down)\]`：匹配 `_up]` 或 `_down]`。
       - `_.*\.s\*p`：匹配 `_` 后面任意字符，接着是 `.s` 后面任意字符，并以 `p` 结尾。
   - `pattern_fext_next`：
     - `r'\[(fext|next)_v_([^_]+)_a_([^_]+)_(up|down)\]\.s\*p'`
       - `\[(fext|next)_v_`：匹配 `[fext_v_` 或 `[next_v_`。
       - `([^_]+)`：匹配一个或多个非下划线字符的标识符。
       - `_a_([^_]+)`：匹配 `_a_` 后面跟一个或多个非下划线字符的标识符。
       - `_(up|down)\]`：匹配 `_up]` 或 `_down]`。
       - `\.s\*p`：匹配 `.s` 后面任意字符，并以 `p` 结尾。

2. **匹配和提取**：
   - `match_thru = pattern_thru.match(filename)`：尝试匹配 `thru` 格式。
   - `match_fext_next = pattern_fext_next.match(filename)`：尝试匹配 `fext` 和 `next` 格式。

### 输出示例

```plaintext
[thru_rx1_up]_xxx.s*p: {'type': 'thru', 'identifier': 'rx1', 'direction': 'up', 'valid': True}
[fext_v_v1_a_a1_up].s*p: {'type': 'fext', 'identifier_v': 'v1', 'identifier_a': 'a1', 'direction': 'up', 'valid': True}
[next_v_v1_a_a1_up].s*p: {'type': 'next', 'identifier_v': 'v1', 'identifier_a': 'a1', 'direction': 'up', 'valid': True}
[thru_test]_test.s*p: {'type': 'thru', 'identifier': 'test', 'direction': 'up', 'valid': True}
[invalid]_test.s*p: {'valid': False}
[next_v_rx2_a_a2_down].s*p: {'type': 'next', 'identifier_v': 'rx2', 'identifier_a': 'a2', 'direction': 'down', 'valid': True}
[fext_v_a1_a2_up].s*p: {'type': 'fext', 'identifier_v': 'a1', 'identifier_a': 'a2', 'direction': 'up', 'valid': True}
[thru_abcd_up]_xxx.s*p: {'type': 'thru', 'identifier': 'abcd', 'direction': 'up', 'valid': True}
[fext_v_xyz_a_abc_down].s*p: {'type': 'fext', 'identifier_v': 'xyz', 'identifier_a': 'abc', 'direction': 'down', 'valid': True}
```

这个脚本将匹配并提取符合指定模式的字符串中的信息，并判断字符串是否符合要求，支持 `thru`、`fext` 和 `next` 格式。

------

好的，让我们更详细地解释和分步骤实施使用Django的ContentType实现通用的评论系统。

### 1. 创建评论模型

首先，我们需要创建一个通用的评论模型。这个模型将使用ContentType和GenericForeignKey来实现与任意模型的关联。

```python
# models.py
from django.db import models
from django.contrib.contenttypes.models import ContentType
from django.contrib.contenttypes.fields import GenericForeignKey

class Comment(models.Model):
    user = models.ForeignKey('auth.User', on_delete=models.CASCADE)  # 记录评论的用户
    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)  # 记录被评论对象的类型
    object_id = models.PositiveIntegerField()  # 记录被评论对象的ID
    content_object = GenericForeignKey('content_type', 'object_id')  # 通过content_type和object_id生成实际对象的引用
    content = models.TextField()  # 评论内容
    created_at = models.DateTimeField(auto_now_add=True)  # 评论创建时间

    def __str__(self):
        return f'Comment by {self.user} on {self.content_object}'
```

### 2. 为模型添加获取评论的方法

在你希望添加评论功能的模型中，添加一个方法来获取相关的评论。例如，在一个博客文章模型中：

```python
# models.py
class BlogPost(models.Model):
    title = models.CharField(max_length=255)  # 博客标题
    content = models.TextField()  # 博客内容
    author = models.ForeignKey('auth.User', on_delete=models.CASCADE)  # 博客作者
    created_at = models.DateTimeField(auto_now_add=True)  # 创建时间

    def get_comments(self):
        content_type = ContentType.objects.get_for_model(self)  # 获取当前模型的ContentType
        return Comment.objects.filter(content_type=content_type, object_id=self.id)  # 获取所有相关的评论

    def __str__(self):
        return self.title
```

### 3. 创建评论的表单和视图

#### 表单

创建一个用于提交评论的表单：

```python
# forms.py
from django import forms
from .models import Comment

class CommentForm(forms.ModelForm):
    class Meta:
        model = Comment
        fields = ['content']  # 评论表单只包含内容字段
```

#### 视图

创建一个视图来显示文章详情及其评论，并处理评论表单的提交：

```python
# views.py
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.contenttypes.models import ContentType
from .models import BlogPost, Comment
from .forms import CommentForm

def post_detail(request, post_id):
    post = get_object_or_404(BlogPost, id=post_id)  # 获取博客文章
    comments = post.get_comments()  # 获取相关评论

    if request.method == 'POST':
        form = CommentForm(request.POST)
        if form.is_valid():
            comment = form.save(commit=False)
            comment.user = request.user  # 设置评论用户
            comment.content_type = ContentType.objects.get_for_model(BlogPost)  # 设置ContentType
            comment.object_id = post.id  # 设置被评论对象的ID
            comment.save()
            return redirect('post_detail', post_id=post.id)  # 提交评论后重定向到文章详情页
    else:
        form = CommentForm()

    return render(request, 'post_detail.html', {'post': post, 'comments': comments, 'form': form})
```

### 4. 创建模板

创建一个模板来显示文章详情、相关评论和评论表单：

```html
<!-- templates/post_detail.html -->
<!DOCTYPE html>
<html>
<head>
    <title>{{ post.title }}</title>
</head>
<body>
    <h1>{{ post.title }}</h1>
    <p>{{ post.content }}</p>
    <p>By {{ post.author }} on {{ post.created_at }}</p>

    <h2>Comments</h2>
    <ul>
        {% for comment in comments %}
            <li>{{ comment.user }}: {{ comment.content }} ({{ comment.created_at }})</li>
        {% endfor %}
    </ul>

    <h2>Leave a comment</h2>
    <form method="post">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Add comment</button>
    </form>
</body>
</html>
```

### 详细解释

1. **评论模型**：
   - `Comment`模型通过`content_type`和`object_id`两个字段来引用被评论对象。`content_object`是一个`GenericForeignKey`，它结合`content_type`和`object_id`生成一个实际的对象引用。

2. **获取评论的方法**：
   - 在`BlogPost`模型中，我们定义了一个`get_comments`方法，它通过ContentType获取当前模型的类型，然后查询`Comment`模型中对应的评论。

3. **表单和视图**：
   - `CommentForm`是一个简单的表单，仅包含评论内容字段。
   - `post_detail`视图处理评论表单的提交，并将评论与博客文章关联。视图首先获取博客文章，然后获取其相关的评论，并处理表单提交。

4. **模板**：
   - 模板显示博客文章的详细信息、所有相关评论以及一个用于提交新评论的表单。

### 使用方法

1. **创建和迁移数据库**：

   - 在`models.py`中定义完模型后，运行以下命令创建和迁移数据库：

     ```bash
     python manage.py makemigrations
     python manage.py migrate
     ```

2. **更新`urls.py`**：

   - 在`urls.py`中添加一个URL模式来处理文章详情视图：

     ```python
     # urls.py
     from django.urls import path
     from . import views
     
     urlpatterns = [
         path('post/<int:post_id>/', views.post_detail, name='post_detail'),
     ]
     ```

3. **启动服务器**：

   - 运行开发服务器：

     ```bash
     python manage.py runserver
     ```

4. **访问和测试**：

   - 在浏览器中访问文章详情页，查看文章、相关评论，并提交新评论。

通过这些步骤，你可以在Django项目中使用ContentType实现一个通用的评论系统，方便地将评论功能扩展到不同的模型。

------

好的，下面是一个完整的Django项目示例，用于实现通用的评论系统，并包括详细的解释。

### 项目结构

假设我们的项目名为 `myproject`，应用名为 `blog`。项目结构如下：

```
myproject/
│
├── myproject/
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   ├── wsgi.py
│   └── asgi.py
│
├── blog/
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── models.py
│   ├── views.py
│   ├── forms.py
│   ├── urls.py
│   ├── templates/
│   │   └── post_detail.html
│   └── migrations/
│       └── __init__.py
│
└── manage.py
```

### 1. 创建Django项目和应用

首先，创建一个新的Django项目和一个应用：

```bash
django-admin startproject myproject
cd myproject
django-admin startapp blog
```

### 2. 修改`settings.py`

在`myproject/settings.py`中，添加应用`blog`：

```python
# myproject/settings.py
INSTALLED_APPS = [
    ...
    'django.contrib.contenttypes',
    'blog',
]
```

### 3. 定义模型

在`blog/models.py`中，定义博客文章模型和评论模型：

```python
# blog/models.py
from django.db import models
from django.contrib.contenttypes.models import ContentType
from django.contrib.contenttypes.fields import GenericForeignKey

class BlogPost(models.Model):
    title = models.CharField(max_length=255)
    content = models.TextField()
    author = models.ForeignKey('auth.User', on_delete=models.CASCADE)
    created_at = models.DateTimeField(auto_now_add=True)

    def get_comments(self):
        content_type = ContentType.objects.get_for_model(self)
        return Comment.objects.filter(content_type=content_type, object_id=self.id)

    def __str__(self):
        return self.title

class Comment(models.Model):
    user = models.ForeignKey('auth.User', on_delete=models.CASCADE)
    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)
    object_id = models.PositiveIntegerField()
    content_object = GenericForeignKey('content_type', 'object_id')
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f'Comment by {self.user} on {self.content_object}'
```

### 4. 创建和应用迁移

创建迁移文件并应用迁移：

```bash
python manage.py makemigrations
python manage.py migrate
```

### 5. 创建评论表单

在`blog/forms.py`中，定义评论表单：

```python
# blog/forms.py
from django import forms
from .models import Comment

class CommentForm(forms.ModelForm):
    class Meta:
        model = Comment
        fields = ['content']
```

### 6. 创建视图

在`blog/views.py`中，创建文章详情视图：

```python
# blog/views.py
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.contenttypes.models import ContentType
from .models import BlogPost, Comment
from .forms import CommentForm

def post_detail(request, post_id):
    post = get_object_or_404(BlogPost, id=post_id)
    comments = post.get_comments()

    if request.method == 'POST':
        form = CommentForm(request.POST)
        if form.is_valid():
            comment = form.save(commit=False)
            comment.user = request.user
            comment.content_type = ContentType.objects.get_for_model(BlogPost)
            comment.object_id = post.id
            comment.save()
            return redirect('post_detail', post_id=post.id)
    else:
        form = CommentForm()

    return render(request, 'post_detail.html', {'post': post, 'comments': comments, 'form': form})
```

### 7. 配置URL

在`blog/urls.py`中，定义URL模式：

```python
# blog/urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('post/<int:post_id>/', views.post_detail, name='post_detail'),
]
```

在`myproject/urls.py`中，包含`blog`应用的URL：

```python
# myproject/urls.py
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('blog.urls')),
]
```

### 8. 创建模板

在`blog/templates/`目录下，创建`post_detail.html`模板：

```html
<!-- blog/templates/post_detail.html -->
<!DOCTYPE html>
<html>
<head>
    <title>{{ post.title }}</title>
</head>
<body>
    <h1>{{ post.title }}</h1>
    <p>{{ post.content }}</p>
    <p>By {{ post.author }} on {{ post.created_at }}</p>

    <h2>Comments</h2>
    <ul>
        {% for comment in comments %}
            <li>{{ comment.user }}: {{ comment.content }} ({{ comment.created_at }})</li>
        {% endfor %}
    </ul>

    <h2>Leave a comment</h2>
    <form method="post">
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit">Add comment</button>
    </form>
</body>
</html>
```

### 9. 运行服务器并测试

启动开发服务器：

```bash
python manage.py runserver
```

在浏览器中访问 `http://127.0.0.1:8000/post/1/` （假设有一个ID为1的博客文章）查看文章详情、相关评论，并提交新评论。

### 详细解释

1. **模型定义**：
   - `BlogPost`模型表示博客文章，包含标题、内容、作者和创建时间。
   - `Comment`模型使用`content_type`和`object_id`实现与任意模型的通用关联，`content_object`是一个`GenericForeignKey`，它结合`content_type`和`object_id`生成实际对象的引用。

2. **获取评论的方法**：
   - 在`BlogPost`模型中，定义了一个`get_comments`方法，通过`ContentType`获取当前模型的类型，然后查询`Comment`模型中对应的评论。

3. **表单和视图**：
   - `CommentForm`是一个简单的表单，仅包含评论内容字段。
   - `post_detail`视图处理评论表单的提交，将评论与博客文章关联，并在页面上显示文章及其评论。

4. **模板**：
   - `post_detail.html`模板显示博客文章的详细信息、所有相关评论以及一个用于提交新评论的表单。

通过这些步骤，你已经创建了一个完整的Django项目，能够使用ContentType实现通用的评论系统。这个系统可以方便地扩展到其他模型，如产品、新闻文章等，只需在相应模型中添加类似的获取评论的方法，并确保在视图中正确处理评论表单的提交。

------

好的，让我们详细解释每一部分的代码及其作用，确保每条代码的用途和功能都清晰明了。

### 1. 创建Django项目和应用

首先，创建一个新的Django项目和应用：

```bash
django-admin startproject myproject
cd myproject
django-admin startapp blog
```

### 2. 修改`settings.py`

在`myproject/settings.py`中，添加应用`blog`：

```python
# myproject/settings.py
INSTALLED_APPS = [
    ...
    'django.contrib.contenttypes',  # 必需的Django组件，用于支持ContentType框架
    'blog',  # 添加我们的应用
]
```

### 3. 定义模型

在`blog/models.py`中，定义博客文章模型和评论模型。

#### 博客文章模型 `BlogPost`

```python
# blog/models.py
from django.db import models
from django.contrib.contenttypes.models import ContentType
from django.contrib.contenttypes.fields import GenericForeignKey

class BlogPost(models.Model):
    title = models.CharField(max_length=255)  # 博客标题
    content = models.TextField()  # 博客内容
    author = models.ForeignKey('auth.User', on_delete=models.CASCADE)  # 关联到用户模型，表示作者
    created_at = models.DateTimeField(auto_now_add=True)  # 创建时间，自动添加

    def get_comments(self):
        content_type = ContentType.objects.get_for_model(self)  # 获取当前模型的ContentType
        return Comment.objects.filter(content_type=content_type, object_id=self.id)  # 获取所有相关的评论

    def __str__(self):
        return self.title  # 返回博客标题，方便在管理界面中显示
```

#### 评论模型 `Comment`

```python
class Comment(models.Model):
    user = models.ForeignKey('auth.User', on_delete=models.CASCADE)  # 关联到用户模型，表示评论者
    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)  # 记录被评论对象的类型
    object_id = models.PositiveIntegerField()  # 记录被评论对象的ID
    content_object = GenericForeignKey('content_type', 'object_id')  # 通过content_type和object_id生成实际对象的引用
    content = models.TextField()  # 评论内容
    created_at = models.DateTimeField(auto_now_add=True)  # 评论创建时间，自动添加

    def __str__(self):
        return f'Comment by {self.user} on {self.content_object}'  # 返回评论信息，方便在管理界面中显示
```

### 4. 创建和应用迁移

创建迁移文件并应用迁移：

```bash
python manage.py makemigrations
python manage.py migrate
```

### 5. 创建评论表单

在`blog/forms.py`中，定义评论表单：

```python
# blog/forms.py
from django import forms
from .models import Comment

class CommentForm(forms.ModelForm):
    class Meta:
        model = Comment
        fields = ['content']  # 表单包含的字段，这里只包含评论内容
```

### 6. 创建视图

在`blog/views.py`中，创建文章详情视图：

```python
# blog/views.py
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib.contenttypes.models import ContentType
from .models import BlogPost, Comment
from .forms import CommentForm

def post_detail(request, post_id):
    post = get_object_or_404(BlogPost, id=post_id)  # 根据ID获取博客文章，若不存在则返回404
    comments = post.get_comments()  # 获取该文章的所有相关评论

    if request.method == 'POST':  # 如果是通过POST方法提交表单
        form = CommentForm(request.POST)  # 将提交的数据绑定到表单
        if form.is_valid():  # 检查表单是否有效
            comment = form.save(commit=False)  # 创建评论对象，但不保存到数据库
            comment.user = request.user  # 设置评论的用户
            comment.content_type = ContentType.objects.get_for_model(BlogPost)  # 设置ContentType
            comment.object_id = post.id  # 设置被评论对象的ID
            comment.save()  # 保存评论到数据库
            return redirect('post_detail', post_id=post.id)  # 重定向到文章详情页面，避免重复提交表单
    else:
        form = CommentForm()  # 如果不是通过POST方法提交表单，则创建一个空的表单

    return render(request, 'post_detail.html', {'post': post, 'comments': comments, 'form': form})  # 渲染模板并传递上下文
```

### 7. 配置URL

在`blog/urls.py`中，定义URL模式：

```python
# blog/urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('post/<int:post_id>/', views.post_detail, name='post_detail'),  # 文章详情页面的URL模式
]
```

在`myproject/urls.py`中，包含`blog`应用的URL：

```python
# myproject/urls.py
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),  # 管理员界面的URL模式
    path('', include('blog.urls')),  # 包含blog应用的URL模式
]
```

### 8. 创建模板

在`blog/templates/`目录下，创建`post_detail.html`模板：

```html
<!-- blog/templates/post_detail.html -->
<!DOCTYPE html>
<html>
<head>
    <title>{{ post.title }}</title>
</head>
<body>
    <h1>{{ post.title }}</h1>
    <p>{{ post.content }}</p>
    <p>By {{ post.author }} on {{ post.created_at }}</p>

    <h2>Comments</h2>
    <ul>
        {% for comment in comments %}
            <li>{{ comment.user }}: {{ comment.content }} ({{ comment.created_at }})</li>
        {% endfor %}
    </ul>

    <h2>Leave a comment</h2>
    <form method="post">
        {% csrf_token %}  <!-- 跨站请求伪造保护 -->
        {{ form.as_p }}  <!-- 以段落形式渲染表单字段 -->
        <button type="submit">Add comment</button>  <!-- 提交按钮 -->
    </form>
</body>
</html>
```

### 9. 运行服务器并测试

启动开发服务器：

```bash
python manage.py runserver
```

在浏览器中访问 `http://127.0.0.1:8000/post/1/` （假设有一个ID为1的博客文章）查看文章详情、相关评论，并提交新评论。

### 详细解释

#### 1. `BlogPost` 模型

- `title`: 标题字段，最大长度为255字符。
- `content`: 内容字段，用于存储博客文章内容。
- `author`: 外键字段，关联到用户模型，用于表示文章作者。
- `created_at`: 日期时间字段，自动添加创建时间。
- `get_comments`: 方法，用于获取当前博客文章的所有评论。
- `__str__`: 方法，返回博客标题，方便在管理界面中显示。

#### 2. `Comment` 模型

- `user`: 外键字段，关联到用户模型，用于表示评论者。
- `content_type`: 外键字段，指向`ContentType`模型，用于记录被评论对象的类型。
- `object_id`: 整数字段，记录被评论对象的ID。
- `content_object`: `GenericForeignKey`字段，通过`content_type`和`object_id`生成实际对象的引用。
- `content`: 内容字段，用于存储评论内容。
- `created_at`: 日期时间字段，自动添加创建时间。
- `__str__`: 方法，返回评论信息，方便在管理界面中显示。

#### 3. 评论表单 `CommentForm`

- `CommentForm`: 表单类，用于创建和验证评论表单。
- `Meta`: 内部类，用于指定表单的模型和字段。

#### 4. 视图 `post_detail`

- `post_detail`: 视图函数，用于处理文章详情页面的请求。
  - `get_object_or_404`: 获取博客文章，若不存在则返回404错误。
  - `get_comments`: 获取该文章的所有相关评论。
  - `request.method == 'POST'`: 检查请求方法是否为POST。
  - `CommentForm(request.POST)`: 将提交的数据绑定到表单。
  - `form.is_valid()`: 检查表单是否有效。
  - `form.save(commit=False)`: 创建评论对象，但不保存到数据库。
  - `comment.save()`: 保存评论到数据库。
  - `redirect('post_detail', post_id=post.id)`: 重定向到文章详情页面。
  - `render(request, 'post_detail.html', {'post': post, 'comments': comments, 'form': form})`: 渲染模板并传递上下文。

#### 5. URL配置

- `blog/urls.py`: 定义应用的URL模式。
  - `path('post/<int:post_id>/', views.post_detail, name='post_detail

')`: 文章详情页面的URL模式。

- `myproject/urls.py`: 包含应用的URL模式。
  - `path('', include('blog.urls'))`: 包含`blog`应用的URL模式。

#### 6. 模板 `post_detail.html`

- 显示博客文章的详细信息、所有相关评论以及一个用于提交新评论的表单。
- `{% csrf_token %}`: 跨站请求伪造保护。
- `{{ form.as_p }}`: 以段落形式渲染表单字段。

通过这些步骤，你已经创建了一个完整的Django项目，能够使用ContentType实现通用的评论系统。这个系统可以方便地扩展到其他模型，如产品、新闻文章等，只需在相应模型中添加类似的获取评论的方法，并确保在视图中正确处理评论表单的提交。
