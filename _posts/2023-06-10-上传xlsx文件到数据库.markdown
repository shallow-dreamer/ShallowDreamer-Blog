---
layout:     post
title:      "django-celery"
subtitle:   ""
date:       2023-06-04
author:     " Shallow Dreamer "
header-img: "img/post-bg-js-version.jpg"
tags:
    - django
    - celery
---

首先，您需要设置一个Django项目并配置MySQL数据库。确保您已经安装了Django和MySQL，并配置了适当的数据库连接。

接下来，我们将创建一个Django视图来处理文件上传和数据导入的逻辑。假设您的Django应用程序名为`myapp`，请按照以下步骤进行操作：

1. 在`myapp/views.py`文件中添加以下代码：

```python
import pandas as pd
from django.shortcuts import render
from django.contrib import messages

def upload_file(request):
    if request.method == 'POST' and request.FILES['file']:
        file = request.FILES['file']
        if file.name.endswith('.xlsx'):
            try:
                df = pd.read_excel(file)
                # 在这里执行将数据导入到数据库的逻辑
                # 例如，将数据保存到MySQL数据库中的名为`mytable`的表中
                df.to_sql('mytable', your_mysql_connection, if_exists='replace', index=False)
                messages.success(request, '文件上传和数据导入成功！')
            except Exception as e:
                messages.error(request, f'发生错误：{str(e)}')
        else:
            messages.error(request, '请选择一个有效的XLSX文件！')
    return render(request, 'upload.html')
```

2. 在`myapp/urls.py`文件中添加以下代码：

```python
from django.urls import path
from myapp.views import upload_file

urlpatterns = [
    path('upload/', upload_file, name='upload'),
]
```

3. 创建一个名为`upload.html`的模板文件，并放置在`myapp/templates/`目录下。在该文件中，您可以使用Vue 3和Element Plus来构建文件上传界面。以下是一个简单的示例：

```html
<template>
  <div>
    <el-upload
      class="upload-demo"
      action="/upload/"
      :on-success="handleSuccess"
      :on-error="handleError"
      :before-upload="beforeUpload"
      :show-file-list="false"
    >
      <el-button slot="trigger" size="small" type="primary">选择文件</el-button>
      <div slot="tip" class="el-upload__tip">只能上传XLSX文件</div>
    </el-upload>
  </div>
</template>

<script>
export default {
  methods: {
    handleSuccess(response) {
      this.$message.success('文件上传成功！');
    },
    handleError(err) {
      this.$message.error('文件上传失败！');
    },
    beforeUpload(file) {
      const isXLSX = file.type === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
      if (!isXLSX) {
        this.$message.error('请选择一个有效的XLSX文件！');
      }
      return isXLSX;
    },
  },
};
</script>

<style scoped>
.upload-demo {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 200px;
  border: 1px dashed #d9d9d9;
  border-radius: 6px;
  background-color: #f5f7fa;
}
</style>
```

要使用Django将XLSX文件中的内容导入到数据库中，你需要使用适当的库来解析和读取XLSX文件，例如`openpyxl`。下面是一个示例，演示了如何使用`openpyxl`和Django来实现这个功能：

1. 首先，确保你已经安装了`openpyxl`库：

```bash
pip install openpyxl
```

2. 在Django应用的视图函数中，处理上传的XLSX文件并将其内容导入到数据库中。在`views.py`文件中，添加以下代码：

```python
import openpyxl
from django.shortcuts import render
from .models import UploadedData

def upload_file(request):
    if request.method == 'POST' and request.FILES['file']:
        file = request.FILES['file']
        # 读取上传的XLSX文件
        workbook = openpyxl.load_workbook(file)
        sheet = workbook.active

        # 遍历每一行数据并保存到数据库
        for row in sheet.iter_rows(values_only=True):
            column1 = row[0]
            column2 = row[1]
            # 创建数据库对象并保存
            data = UploadedData(column1=column1, column2=column2)
            data.save()

        return render(request, 'success.html')

    return render(request, 'upload.html')
```

3. 创建一个上传文件的HTML模板。在`templates`文件夹下创建一个名为`upload.html`的模板文件，并添加以下代码：

```html
<form method="post" enctype="multipart/form-data">
  {% csrf_token %}
  <input type="file" name="file" accept=".xlsx">
  <button type="submit">上传</button>
</form>
```

4. 创建一个成功页面的HTML模板。在`templates`文件夹下创建一个名为`success.html`的模板文件，并添加以下代码：

```html
<h2>上传成功！</h2>
```

5. 在`urls.py`文件中添加相应的URL映射，将视图函数与URL关联起来：

```python
from django.urls import path
from . import views

urlpatterns = [
    path('upload/', views.upload_file, name='upload'),
]
```

完成以上步骤后，你可以启动Django开发服务器，然后在浏览器中访问`http://localhost:8000/upload/`，上传XLSX文件，并将文件内容导入到数据库中。

请注意，上述示例仅涵盖了基本的文件上传和数据导入逻辑。在实际应用中，你可能需要进行更多的数据验证和错误处理，并根据实际需求对模型、视图和模板进行调整。

以下是使用 Python 编写的一个接受 xlsx 文件并将其中内容导入到数据库的示例代码，该代码在导入时先创建一个临时数据表存储数据，在导入成功后将原数据表改名，再将临时数据表改为原数据表名，最后删除原数据表。如果导入出错，可将 xlsx 文件中导入出错的单元格及其出错原因返回。

```python
import openpyxl
import sqlite3
import os

# 打开 xlsx 文件
wb = openpyxl.load_workbook('example.xlsx')
sheet = wb.active

# 连接数据库
conn = sqlite3.connect('mydatabase.db')
cursor = conn.cursor()

# 创建临时表格
cursor.execute("""CREATE TABLE mytable_temp 
                  (id INTEGER PRIMARY KEY AUTOINCREMENT, 
                   name TEXT, age INTEGER, email TEXT)""")

# 读取数据并插入临时表格
error_list = []
for row in sheet.iter_rows(min_row=2, values_only=True):
    try:
        name, age, email = row
        cursor.execute("INSERT INTO mytable_temp (name, age, email) VALUES (?, ?, ?)", (name, age, email))
    except Exception as e:
        error_list.append((row[0], row[1], row[2], str(e)))   # 记录错误信息

if error_list:
    conn.rollback()   # 回滚事务
    print("以下行数据导入出错：")
    for error in error_list:
        print(f"姓名：{error[0]}，年龄：{error[1]}，邮箱：{error[2]}，错误原因：{error[3]}")
    conn.close()
else:
    # 更改表格名称
    cursor.execute("ALTER TABLE mytable RENAME TO mytable_old")
    cursor.execute("ALTER TABLE mytable_temp RENAME TO mytable")

    # 删除原表格
    cursor.execute("DROP TABLE IF EXISTS mytable_old")

    # 提交更改并关闭连接
    conn.commit()
    conn.close()

    print("导入成功")
```

在上述代码中，与前一个示例相比，增加了以下步骤：

1. 在数据库中创建临时数据表 mytable_temp。
2. 将 xlsx 文件中的数据插入到临时数据表 mytable_temp 中。
3. 判断是否有导入出错的数据，如果有，则回滚事务，输出错误信息，并关闭连接；如果没有，则进行以下操作。
4. 更改原数据表 mytable 的名称为 mytable_old。
5. 更改临时数据表 mytable_temp 的名称为 mytable。
6. 删除原数据表 mytable_old。
7. 提交更改并关闭连接，输出“导入成功”的提示信息。

注意：在实际使用中需要根据具体情况进行修改，如更改文件路径、数据库名称、数据表名称等。同时还需要根据实际情况处理异常情况。

要读取XLSX文件并将数据导入到数据库，并返回错误的单元格位置，你可以使用以下步骤：

1. 安装所需的库：

   - 使用`pip`安装`pandas`库：`pip install pandas`
   - 使用`pip`安装`openpyxl`库：`pip install openpyxl`
   - 使用`pip`安装适合你数据库类型的库（例如，如果你使用MySQL，可以安装`mysql-connector-python`库：`pip install mysql-connector-python`）

2. 导入所需的库：

   ```python
   import pandas as pd
   import mysql.connector
   ```

3. 读取XLSX文件并处理错误：

   ```python
   try:
       df = pd.read_excel('your_file.xlsx')
   except Exception as e:
       # 处理文件读取错误
       print("读取文件时发生错误:", str(e))
       return
   
   # 检查数据的完整性
   errors = []
   for column in df.columns:
       for index, value in df[column].items():
           if pd.isnull(value):
               errors.append((column, index))
   
   if errors:
       # 处理数据错误
       print("以下单元格存在错误:")
       for error in errors:
           print("列:", error[0], "行:", error[1])
       return
   ```

4. 连接到数据库：

   ```python
   cnx = mysql.connector.connect(
       host='your_host',
       user='your_user',
       password='your_password',
       database='your_database'
   )
   ```

5. 创建一个游标对象：

   ```python
   cursor = cnx.cursor()
   ```

6. 将数据导入数据库：

   ```python
   for row in df.itertuples():
       query = "INSERT INTO your_table (column1, column2, ...) VALUES (%s, %s, ...)"
       values = (row.column1, row.column2, ...)
       try:
           cursor.execute(query, values)
       except Exception as e:
           # 处理插入错误
           print("插入数据时发生错误:", str(e))
           print("行:", row.Index)
           break
   
   cnx.commit()
   ```

7. 关闭游标和数据库连接：

   ```python
   cursor.close()
   cnx.close()
   ```

这些步骤将帮助你将XLSX文件的数据导入到数据库中，并返回错误的单元格位置。请根据你的数据库类型（例如MySQL、PostgreSQL等）进行适当的更改，并根据你的实际情况修改连接参数和SQL查询。如果读取文件或插入数据时发生错误，将在控制台打印错误信息，并返回错误的单元格位置。

要读取XLSX文件并将数据导入到数据库，并将数据错误的单元格位置用XLSX列标和行标返回，你可以使用以下步骤：

1. 安装所需的库：

   - 使用`pip`安装`pandas`库：`pip install pandas`
   - 使用`pip`安装`openpyxl`库：`pip install openpyxl`
   - 使用`pip`安装适合你数据库类型的库（例如，如果你使用MySQL，可以安装`mysql-connector-python`库：`pip install mysql-connector-python`）

2. 导入所需的库：

   ```python
   import pandas as pd
   import mysql.connector
   import openpyxl
   from openpyxl.utils import get_column_letter
   ```

3. 读取XLSX文件并处理错误：

   ```python
   try:
       df = pd.read_excel('your_file.xlsx')
   except Exception as e:
       # 处理文件读取错误
       print("读取文件时发生错误:", str(e))
       return
   
   # 检查数据的完整性
   errors = []
   for column in df.columns:
       for index, value in df[column].items():
           if pd.isnull(value):
               column_letter = get_column_letter(column + 1)
               errors.append((column_letter, index + 2))  # +2 是因为索引从0开始，而行标从1开始
   
   if errors:
       # 处理数据错误
       print("以下单元格存在错误:")
       for error in errors:
           print("列:", error[0], "行:", error[1])
       return
   ```

4. 连接到数据库：

   ```python
   cnx = mysql.connector.connect(
       host='your_host',
       user='your_user',
       password='your_password',
       database='your_database'
   )
   ```

5. 创建一个游标对象：

   ```python
   cursor = cnx.cursor()
   ```

6. 将数据导入数据库：

   ```python
   for row in df.itertuples():
       query = "INSERT INTO your_table (column1, column2, ...) VALUES (%s, %s, ...)"
       values = (row.column1, row.column2, ...)
       try:
           cursor.execute(query, values)
       except Exception as e:
           # 处理插入错误
           print("插入数据时发生错误:", str(e))
           print("单元格位置:", row[0])
           break
   
   cnx.commit()
   ```

7. 关闭游标和数据库连接：

   ```python
   cursor.close()
   cnx.close()
   ```

这些步骤将帮助你将XLSX文件的数据导入到数据库中，并将数据错误的单元格位置用XLSX列标和行标返回。请根据你的数据库类型（例如MySQL、PostgreSQL等）进行适当的更改，并根据你的实际情况修改连接参数和SQL查询。如果读取文件或插入数据时发生错误，将在控制台打印错误信息，并返回错误的单元格位置。

如果在XLSX文件的第一行中有字符串作为标记，并且你想获取下面的数据，可以使用以下方法：

1. 读取XLSX文件：

   ```python
   try:
       df = pd.read_excel('your_file.xlsx')
   except Exception as e:
       # 处理文件读取错误
       print("读取文件时发生错误:", str(e))
       return
   ```

2. 获取标记所在列的索引：

   ```python
   marker = 'YourMarker'  # 将'YourMarker'替换为你实际的标记字符串
   marker_col = None
   for col in df.columns:
       if df[col].iloc[0] == marker:
           marker_col = col
           break
   
   if marker_col is None:
       # 处理未找到标记的情况
       print("未找到标记:", marker)
       return
   ```

3. 获取标记下方的数据：

   ```python
   data_df = df.iloc[1:, [marker_col]]
   ```

   这将创建一个新的DataFrame `data_df`，其中包含标记下方的所有数据。

4. 处理数据：
   现在你可以对`data_df`进行进一步的处理，例如将数据导入到数据库或进行其他操作。

请注意，在上述代码中，假设XLSX文件的第一行是标记行，并且标记字符串在该行中是唯一的。你需要将`'YourMarker'`替换为你实际的标记字符串。此代码还假设你使用了pandas库进行文件读取和处理。
