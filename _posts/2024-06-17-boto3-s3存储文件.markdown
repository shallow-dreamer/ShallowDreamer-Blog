---
layout:     post
title:      "boto3-s3存储文件"
subtitle:   ""
date:       2024-06-18
author:     " Shallow Dreamer"
header-img: "img/post-bg-js-version.jpg"
tags:
    - django
    - boto3
    - s3storage
---

使用 `boto3` 库与 AWS S3 进行交互是非常方便和强大的。以下是一些常见的操作，包括多文件上传、列出文件、下载文件和删除文件。

首先，需要安装 `boto3`：
```bash
pip install boto3
```

接下来是一些示例代码：

### 设置 AWS 凭证和配置
确保在您的环境中设置了 AWS 凭证和配置。可以通过配置文件或环境变量来设置。这里是使用配置文件的方法：

1. 创建或编辑 `~/.aws/credentials` 文件：
   ```
   [default]
   aws_access_key_id = YOUR_ACCESS_KEY
   aws_secret_access_key = YOUR_SECRET_KEY
   ```

2. 创建或编辑 `~/.aws/config` 文件：
   ```
   [default]
   region = YOUR_REGION
   ```

### 初始化 S3 客户端
```python
import boto3

s3_client = boto3.client('s3')
```

### 多文件上传
要上传多个文件，可以使用一个简单的循环来实现：

```python
import os

def upload_files(file_names, bucket_name, s3_client):
    for file_name in file_names:
        s3_client.upload_file(file_name, bucket_name, os.path.basename(file_name))
        print(f'Uploaded {file_name} to {bucket_name}')

# 示例使用
file_names = ['file1.txt', 'file2.txt', 'file3.txt']
bucket_name = 'your-s3-bucket-name'
upload_files(file_names, bucket_name, s3_client)
```

### 列出文件
列出 S3 存储桶中的文件：

```python
def list_files(bucket_name, s3_client):
    response = s3_client.list_objects_v2(Bucket=bucket_name)
    if 'Contents' in response:
        for obj in response['Contents']:
            print(obj['Key'])
    else:
        print(f'No files found in {bucket_name}')

# 示例使用
list_files(bucket_name, s3_client)
```

### 下载文件
从 S3 下载文件：

```python
def download_file(file_name, bucket_name, s3_client, destination):
    s3_client.download_file(bucket_name, file_name, destination)
    print(f'Downloaded {file_name} to {destination}')

# 示例使用
download_file('file1.txt', bucket_name, s3_client, 'downloaded_file1.txt')
```

### 删除文件
从 S3 删除文件：

```python
def delete_file(file_name, bucket_name, s3_client):
    s3_client.delete_object(Bucket=bucket_name, Key=file_name)
    print(f'Deleted {file_name} from {bucket_name}')

# 示例使用
delete_file('file1.txt', bucket_name, s3_client)
```

### 删除多个文件
删除 S3 中的多个文件：

```python
def delete_files(file_names, bucket_name, s3_client):
    objects = [{'Key': file_name} for file_name in file_names]
    response = s3_client.delete_objects(Bucket=bucket_name, Delete={'Objects': objects})
    for deleted in response.get('Deleted', []):
        print(f"Deleted {deleted['Key']}")

# 示例使用
delete_files(['file1.txt', 'file2.txt'], bucket_name, s3_client)
```

通过这些代码示例，你可以方便地进行多文件上传、列出文件、下载文件和删除文件等操作。根据实际需求，你可能需要进行更多的错误处理和异常处理，以确保代码的健壮性和稳定性。

------

在 `boto3` 的配置中，`endpoint_url` 属性用于指定 AWS 服务的自定义端点。这在以下几种情况下非常有用：

1. **非 AWS 的 S3 兼容存储服务**：
   如果你使用的是一个兼容 S3 API 的非 AWS 的存储服务（如 MinIO、DigitalOcean Spaces、Wasabi 等），你需要指定服务的端点 URL。

2. **区域化端点**：
   AWS S3 在多个区域提供服务，每个区域有不同的端点。如果你需要明确指定某个区域的端点，可以使用这个属性。

3. **本地开发和测试**：
   如果你在本地运行一个 S3 的模拟服务进行开发和测试（如 `localstack`），需要设置 `endpoint_url` 来指向本地服务。

### 使用示例

以下是如何在 `boto3` 中设置 `endpoint_url` 的示例：

```python
import boto3

# 自定义端点 URL
endpoint_url = 'https://custom-s3-endpoint.com'

s3_client = boto3.client(
    's3',
    endpoint_url=endpoint_url,
    aws_access_key_id='YOUR_ACCESS_KEY',
    aws_secret_access_key='YOUR_SECRET_KEY',
    region_name='YOUR_REGION'
)

# 示例操作
bucket_name = 'your-s3-bucket-name'

# 列出文件
def list_files(bucket_name, s3_client):
    response = s3_client.list_objects_v2(Bucket=bucket_name)
    if 'Contents' in response:
        for obj in response['Contents']:
            print(obj['Key'])
    else:
        print(f'No files found in {bucket_name}')

list_files(bucket_name, s3_client)
```

### 配置文件中使用 `endpoint_url`

在一些情况下，你可能会使用配置文件（如 `~/.aws/config`）来设置端点 URL。这可以简化代码中的配置。

#### `~/.aws/config` 文件示例：
```ini
[default]
region = YOUR_REGION
endpoint_url = https://custom-s3-endpoint.com
```

#### 使用配置文件：
```python
import boto3

s3_client = boto3.client('s3')

# 示例操作
bucket_name = 'your-s3-bucket-name'

# 列出文件
def list_files(bucket_name, s3_client):
    response = s3_client.list_objects_v2(Bucket=bucket_name)
    if 'Contents' in response:
        for obj in response['Contents']:
            print(obj['Key'])
    else:
        print(f'No files found in {bucket_name}')

list_files(bucket_name, s3_client)
```

### 注意事项

- 确保 `endpoint_url` 的值正确无误，否则可能会导致连接失败。
- 使用自定义端点时，需要确保其他配置（如访问密钥、区域等）也正确无误。
- 在使用本地模拟服务进行开发和测试时，记得在实际部署时移除或修改这些设置，以确保连接到正确的生产环境。

`endpoint_url` 是一个非常有用的属性，允许你灵活地指定和使用不同的 S3 服务端点，满足各种开发和部署需求。
