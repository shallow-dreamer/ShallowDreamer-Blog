---
layout:     post
title:      "虚拟列表"
subtitle:   ""
date:       2024-07-24
author:     " Shallow Dreamer"
header-img: "img/post-bg-js-version.jpg"
tags:
    - vue
---

为了确保滚动时元素正确显示并且性能良好，我们可以通过调整数据的管理方式和渲染逻辑，来实现虚拟滚动。这次，我们确保所有计算正确，并使用 `flex` 布局。以下是一个详细的实现方式，保证元素在滚动时正确显示。

### 更新后的代码实现

```html
<template>
  <div class="container" ref="container" @scroll="onScroll">
    <div class="spacer" :style="{ height: spacerHeight + 'px' }"></div>
    <div class="items" :style="{ transform: `translateY(${marginTop}px)` }">
      <el-card
        v-for="(item, index) in visibleItems"
        :key="item.id"
        class="item"
      >
        <div class="card-content">
          <el-checkbox :label="item.id" v-model="selectedItems">{{ item.text }}</el-checkbox>
          <el-select
            v-model="item.selectedOption"
            filterable
            remote
            reserve-keyword
            :remote-method="remoteMethod"
            :loading="loading"
          >
            <el-option
              v-for="option in options"
              :key="option.value"
              :label="option.label"
              :value="option.value"
            ></el-option>
          </el-select>
        </div>
      </el-card>
    </div>
  </div>
</template>

<script>
import { debounce } from 'lodash';

export default {
  data() {
    return {
      listData: Array.from({ length: 1000 }, (_, i) => ({
        id: i,
        text: `Item ${i}`,
        selectedOption: null
      })),
      startIndex: 0,
      visibleCount: 10,
      buffer: 5, // Buffer items to prevent flickering
      selectedItems: [],
      options: [],
      loading: false,
      itemHeight: 150, // Ensure this matches the height of el-card
    };
  },
  computed: {
    visibleItems() {
      const start = Math.max(this.startIndex - this.buffer, 0);
      const end = Math.min(this.startIndex + this.visibleCount + this.buffer, this.listData.length);
      return this.listData.slice(start, end);
    },
    spacerHeight() {
      return this.listData.length * this.itemHeight;
    },
    marginTop() {
      return this.startIndex * this.itemHeight;
    }
  },
  methods: {
    onScroll: debounce(function () {
      const container = this.$refs.container;
      const scrollTop = container.scrollTop;
      this.startIndex = Math.floor(scrollTop / this.itemHeight);
    }, 50), // Adjust debounce time as needed
    deleteSelected() {
      this.listData = this.listData.filter(item => !this.selectedItems.includes(item.id));
      this.selectedItems = [];
      this.onScroll(); // Recalculate visible items
    },
    remoteMethod(query) {
      if (query !== '') {
        this.loading = true;
        setTimeout(() => {
          this.loading = false;
          this.options = this.listData.filter(item => {
            return item.text.toLowerCase().includes(query.toLowerCase());
          }).map(item => {
            return { value: item.id, label: item.text };
          });
        }, 200);
      } else {
        this.options = [];
      }
    }
  },
  mounted() {
    this.onScroll(); // Initialize visible items
  }
};
</script>

<style>
.container {
  height: 400px; /* Adjust this height as needed */
  overflow-y: auto;
  position: relative;
}
.spacer {
  width: 100%;
  background: transparent;
}
.items {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
}
.item {
  box-sizing: border-box;
  border-bottom: 1px solid #ddd;
  display: flex;
  align-items: center;
  padding: 10px;
  cursor: pointer;
  height: 150px; /* Ensure this matches itemHeight */
}
.card-content {
  display: flex;
  flex-direction: column;
  height: 100%;
}
</style>
```

### 关键点解释

1. **`visibleItems`** 计算属性：
   - 根据 `startIndex` 和 `buffer` 计算出需要渲染的条目，确保在可视区域及其附近的条目都能正确渲染。

2. **`spacerHeight`** 计算属性：
   - 用于设置 `spacer` 的高度，确保滚动条的高度正确。

3. **`marginTop`** 计算属性：
   - 根据 `startIndex` 计算出 `items` 容器的 `margin-top`，确保条目在正确的位置显示。

4. **滚动事件处理 (`onScroll`)**：
   - 使用防抖（`debounce`）优化滚动事件处理，减少计算频率，提高性能。

### 调试建议

- **检查控制台**：确保没有错误或警告。
- **浏览器开发者工具**：查看元素的实际渲染情况，检查 `transform` 和条目的渲染位置。
- **调整 `debounce` 时间**：根据实际性能调整防抖时间，以确保滚动平滑。

通过这些调整，你应该能确保条目在滚动时正确显示。如果这个实现仍然存在问题，请告诉我具体的表现或错误信息，我会根据情况进行进一步调整。

------

要实现自适应 `itemHeight` 的虚拟列表，需要在渲染完成后动态计算每个条目的高度，并根据这些高度来调整滚动和渲染逻辑。这种实现会稍微复杂一些，因为需要处理动态高度的情况。以下是一个解决方案：

### 更新后的虚拟列表组件实现

#### `VirtualList.vue`

```html
<template>
  <div class="virtual-list-container" ref="container" @scroll="onScroll">
    <div class="spacer" :style="{ height: totalHeight + 'px' }"></div>
    <div class="items" :style="{ transform: `translateY(${offsetTop}px)` }" ref="items">
      <slot v-for="(item, index) in visibleItems" :item="item" :index="index" :key="item.id" />
    </div>
  </div>
</template>

<script>
import { debounce } from 'lodash';

export default {
  name: 'VirtualList',
  props: {
    items: {
      type: Array,
      required: true
    },
    visibleCount: {
      type: Number,
      default: 10
    },
    buffer: {
      type: Number,
      default: 5
    }
  },
  data() {
    return {
      startIndex: 0,
      heights: [],
      offsetTop: 0,
      totalHeight: 0,
    };
  },
  computed: {
    visibleItems() {
      const start = Math.max(this.startIndex - this.buffer, 0);
      const end = Math.min(this.startIndex + this.visibleCount + this.buffer, this.items.length);
      return this.items.slice(start, end);
    }
  },
  methods: {
    onScroll: debounce(function () {
      const container = this.$refs.container;
      const scrollTop = container.scrollTop;
      this.updateVisibleItems(scrollTop);
    }, 50),
    updateVisibleItems(scrollTop) {
      let accumulatedHeight = 0;
      let newStartIndex = 0;
      
      for (let i = 0; i < this.heights.length; i++) {
        if (accumulatedHeight + this.heights[i] > scrollTop) {
          newStartIndex = i;
          break;
        }
        accumulatedHeight += this.heights[i];
      }
      
      this.startIndex = newStartIndex;
      this.offsetTop = accumulatedHeight;
    },
    calculateHeights() {
      const items = this.$refs.items.children;
      this.heights = Array.from(items).map(item => item.getBoundingClientRect().height);
      this.totalHeight = this.heights.reduce((a, b) => a + b, 0);
    }
  },
  watch: {
    items: {
      immediate: true,
      handler() {
        this.$nextTick(() => {
          this.calculateHeights();
          this.updateVisibleItems(this.$refs.container.scrollTop);
        });
      }
    }
  },
  mounted() {
    this.$nextTick(() => {
      this.calculateHeights();
      this.updateVisibleItems(this.$refs.container.scrollTop);
    });
    window.addEventListener('resize', this.calculateHeights);
  },
  beforeDestroy() {
    window.removeEventListener('resize', this.calculateHeights);
  }
};
</script>

<style>
.virtual-list-container {
  height: 400px; /* Adjust this height as needed */
  overflow-y: auto;
  position: relative;
}
.spacer {
  width: 100%;
  background: transparent;
}
.items {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
}
</style>
```

### 使用虚拟列表组件

以下是如何使用 `VirtualList` 组件的示例，将 `el-card` 元素作为虚拟列表中的项渲染。

#### `App.vue`

```html
<template>
  <div id="app">
    <VirtualList :items="listData" :visibleCount="10" :buffer="5">
      <template v-slot="{ item, index }">
        <el-card class="item" :key="item.id">
          <div class="card-content">
            <el-checkbox :label="item.id" v-model="selectedItems">{{ item.text }}</el-checkbox>
            <el-select
              v-model="item.selectedOption"
              filterable
              remote
              reserve-keyword
              :remote-method="remoteMethod"
              :loading="loading"
            >
              <el-option
                v-for="option in options"
                :key="option.value"
                :label="option.label"
                :value="option.value"
              ></el-option>
            </el-select>
          </div>
        </el-card>
      </template>
    </VirtualList>
  </div>
</template>

<script>
import VirtualList from './components/VirtualList.vue';

export default {
  components: {
    VirtualList
  },
  data() {
    return {
      listData: Array.from({ length: 1000 }, (_, i) => ({
        id: i,
        text: `Item ${i}`,
        selectedOption: null
      })),
      selectedItems: [],
      options: [],
      loading: false
    };
  },
  methods: {
    deleteSelected() {
      this.listData = this.listData.filter(item => !this.selectedItems.includes(item.id));
      this.selectedItems = [];
    },
    remoteMethod(query) {
      if (query !== '') {
        this.loading = true;
        setTimeout(() => {
          this.loading = false;
          this.options = this.listData.filter(item => {
            return item.text.toLowerCase().includes(query.toLowerCase());
          }).map(item => {
            return { value: item.id, label: item.text };
          });
        }, 200);
      } else {
        this.options = [];
      }
    }
  }
};
</script>

<style>
.item {
  box-sizing: border-box;
  border-bottom: 1px solid #ddd;
  display: flex;
  align-items: center;
  padding: 10px;
  cursor: pointer;
}
.card-content {
  display: flex;
  flex-direction: column;
  height: 100%;
}
</style>
```

### 关键点解释

1. **`calculateHeights` 方法**：
   - 动态计算每个条目的高度，并存储在 `heights` 数组中，同时计算出 `totalHeight`。

2. **`updateVisibleItems` 方法**：
   - 根据滚动位置计算当前可见的条目起始索引和偏移量 `offsetTop`。

3. **插槽使用**：
   - 在 `VirtualList` 中使用插槽，可以灵活地传递任意内容作为条目渲染。

### 调试建议

- **检查控制台**：确保没有错误或警告。
- **浏览器开发者工具**：查看元素的实际渲染情况，检查 `transform` 和条目的渲染位置。
- **调整高度计算**：确保 `calculateHeights` 方法正确计算条目高度，并且 `updateVisibleItems` 正确更新可见条目。

通过这种方式，可以将虚拟列表功能封装为一个可复用的组件，并在任何需要的地方使用，同时支持动态高度的条目。

------

```vue
<template>
  <div>
    <virtual-list :items="items">
      <template v-slot="{ item, index }">
        <div :class="index % 2 == 0 ? 'custom-item' : 'custom-item1'">
          {{ index + 1 }}. {{ item }}
        </div>
      </template>
    </virtual-list>
  </div>
</template>

<script>
import VirtualList from '@/components/VirtualList.vue';

export default {
  components: {
    VirtualList
  },
  data() {
    return {
      items: Array.from({ length: 999 }, (_, i) => `Item ${i + 1}`)
    };
  }
};
</script>

<style>
.custom-item {
  padding: 20px;
  background-color: #f5f5f5;
  margin-bottom: 5px;
  border-radius: 5px;
}

.custom-item1 {
  padding: 40px;
  background-color: #f5f5f5;
  margin-bottom: 5px;
  border-radius: 5px;
}
</style>
```

```vue
<template>
    <div ref="container" class="virtual-list-container" @scroll="onScroll">
      <div class="spacer" :style="{ height: totalHeight + 'px' }"></div>
      <div class="items" :style="{ transform: `translateY(${offsetTop}px)` }">
        <div
          v-for="(item, index) in visibleItems"
          :key="startIndex + index"
          :ref="el => setItemRef(el, startIndex + index)"
          class="item"
          :class="{ selected: selectedItems.includes(startIndex + index) }"
          @click="toggleSelection(startIndex + index)"
        >
          <slot :item="item" :index="startIndex + index" />
        </div>
      </div>
    </div>
  </template>
  
  <script>
  export default {
    name: 'VirtualList',
    props: {
      items: {
        type: Array,
        required: true
      },
      buffer: {
        type: Number,
        default: 5
      }
    },
    data() {
      return {
        startIndex: 0,
        offsetTop: 0,
        totalHeight: 0,
        containerHeight: 0,
        visibleCount: 0,
        itemHeights: [],
        selectedItems: []
      };
    },
    computed: {
      visibleItems() {
        return this.items.slice(this.startIndex, this.startIndex + this.visibleCount);
      }
    },
    methods: {
      onScroll() {
        const scrollTop = this.$refs.container.scrollTop;
        this.updateVisibleRange(scrollTop);
      },
      updateVisibleRange(scrollTop) {
        let sumHeight = 0;
        let found = false;
        
        for (let i = 0; i < this.itemHeights.length; i++) {
          sumHeight += this.itemHeights[i];
          if (sumHeight > scrollTop) {
            this.startIndex = i;
            this.offsetTop = sumHeight - this.itemHeights[i];
            found = true;
            break;
          }
        }
        
        if (!found) {
          this.startIndex = 0;
          this.offsetTop = 0;
        }
  
        this.updateVisibleCount();
      },
      updateVisibleCount() {
        this.containerHeight = this.$refs.container.clientHeight;
        let sumHeight = 0;
        let count = 0;
        
        for (let i = this.startIndex; i < this.itemHeights.length; i++) {
          sumHeight += this.itemHeights[i];
          count++;
          if (sumHeight > this.containerHeight) break;
        }
        
        this.visibleCount = count + this.buffer;
      },
      toggleSelection(index) {
        const selectedIndex = this.selectedItems.indexOf(index);
        if (selectedIndex > -1) {
          this.selectedItems.splice(selectedIndex, 1);
        } else {
          this.selectedItems.push(index);
        }
      },
      setItemRef(el, index) {
        if (el) {
          this.$nextTick(() => {
            this.itemHeights[index] = el.offsetHeight;
            this.updateTotalHeight();
            this.updateVisibleCount();
          });
        }
      },
      updateTotalHeight() {
        this.totalHeight = this.itemHeights.reduce((acc, height) => acc + height, 0);
      }
    },
    mounted() {
      this.containerHeight = this.$refs.container.clientHeight;
      this.updateVisibleCount();
    }
  };
  </script>
  
  <style>
  .virtual-list-container {
    height: 400px;
    overflow-y: auto;
    position: relative;
  }
  .spacer {
    width: 100%;
  }
  .items {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
  }
  .item {
    padding: 10px;
    border-bottom: 1px solid #ccc;
    box-sizing: border-box;
  }
  .item.selected {
    background-color: #b3d4fc;
  }
  </style>
```

------

明白了，我会提供一个只包含虚拟滚动功能的组件。这个组件将只负责渲染可视区域内的元素，而不处理选择等其他操作。这些额外的操作可以在使用该组件的地方自行实现。

### 简化版 VirtualScroll.vue 组件

```vue
<template>
  <div ref="container" class="virtual-scroll-container" @scroll="onScroll">
    <div class="spacer" :style="{ height: totalHeight + 'px' }"></div>
    <div class="items" :style="{ transform: `translateY(${offsetTop}px)` }">
      <div
        v-for="(item, index) in visibleItems"
        :key="startIndex + index"
        :ref="el => setItemRef(el, startIndex + index)"
        class="item"
      >
        <slot :item="item" :index="startIndex + index" />
      </div>
    </div>
  </div>
</template>

<script>
export default {
  name: 'VirtualScroll',
  props: {
    items: {
      type: Array,
      required: true
    },
    buffer: {
      type: Number,
      default: 5
    }
  },
  data() {
    return {
      startIndex: 0,
      offsetTop: 0,
      totalHeight: 0,
      containerHeight: 0,
      visibleCount: 0,
      itemHeights: []
    };
  },
  computed: {
    visibleItems() {
      return this.items.slice(this.startIndex, this.startIndex + this.visibleCount);
    }
  },
  methods: {
    onScroll() {
      const scrollTop = this.$refs.container.scrollTop;
      this.updateVisibleRange(scrollTop);
    },
    updateVisibleRange(scrollTop) {
      let sumHeight = 0;
      let found = false;

      for (let i = 0; i < this.itemHeights.length; i++) {
        sumHeight += this.itemHeights[i];
        if (sumHeight > scrollTop) {
          this.startIndex = i;
          this.offsetTop = sumHeight - this.itemHeights[i];
          found = true;
          break;
        }
      }

      if (!found) {
        this.startIndex = 0;
        this.offsetTop = 0;
      }

      this.updateVisibleCount();
    },
    updateVisibleCount() {
      this.containerHeight = this.$refs.container.clientHeight;
      let sumHeight = 0;
      let count = 0;

      for (let i = this.startIndex; i < this.itemHeights.length; i++) {
        sumHeight += this.itemHeights[i];
        count++;
        if (sumHeight > this.containerHeight) break;
      }

      this.visibleCount = count + this.buffer;
    },
    setItemRef(el, index) {
      if (el) {
        this.$nextTick(() => {
          this.itemHeights[index] = el.offsetHeight;
          this.updateTotalHeight();
          this.updateVisibleCount();
        });
      }
    },
    updateTotalHeight() {
      this.totalHeight = this.itemHeights.reduce((acc, height) => acc + height, 0);
    }
  },
  mounted() {
    this.containerHeight = this.$refs.container.clientHeight;
    this.updateVisibleCount();
  }
};
</script>

<style>
.virtual-scroll-container {
  height: 400px;
  overflow-y: auto;
  position: relative;
}
.spacer {
  width: 100%;
}
.items {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
}
.item {
  box-sizing: border-box;
}
</style>
```

### 使用组件并实现选择操作

下面是一个使用 `VirtualScroll` 组件的例子，其中在使用组件中自行实现选择操作：

```vue
<template>
  <div>
    <virtual-scroll :items="items">
      <template v-slot="{ item, index }">
        <div
          class="custom-item"
          :class="{ selected: selectedItems.includes(index) }"
          @click="toggleSelection(index)"
        >
          {{ index + 1 }}. {{ item }}
        </div>
      </template>
    </virtual-scroll>
  </div>
</template>

<script>
import VirtualScroll from './VirtualScroll.vue';

export default {
  components: {
    VirtualScroll
  },
  data() {
    return {
      items: Array.from({ length: 1000 }, (_, i) => `Item ${i + 1}`),
      selectedItems: []
    };
  },
  methods: {
    toggleSelection(index) {
      const selectedIndex = this.selectedItems.indexOf(index);
      if (selectedIndex > -1) {
        this.selectedItems.splice(selectedIndex, 1); // 取消选择
      } else {
        this.selectedItems.push(index); // 选择
      }
    }
  }
};
</script>

<style>
.custom-item {
  padding: 20px;
  background-color: #f5f5f5;
  margin-bottom: 5px;
  border-radius: 5px;
  cursor: pointer;
}
.custom-item.selected {
  background-color: #b3d4fc;
}
</style>
```

### 说明

- **VirtualScroll 组件**：只处理虚拟滚动，不包括选择等其他操作。
- **使用组件**：在 `VirtualScroll` 组件中插入自定义内容，并在此处实现选择操作或其他逻辑。

这种方式可以将虚拟滚动和业务逻辑分开，实现更好的模块化和代码复用。
