---
layout:     post
title:      "django数据库迁移"
subtitle:   ""
date:       2024-05-23
author:     " Shallow Dreamer "
header-img: "img/post-bg-js-version.jpg"
tags:
    - django
---

好的，以下是一个完整的示例代码，用于创建一个使用 Poetry、Django、Django REST framework 和 PostgreSQL 的项目。这个示例将展示如何配置和使用这些工具，并生成和应用数据库迁移。

### 步骤 1: 创建和配置 Django 项目

首先，确保你已经安装了 Poetry 和 PostgreSQL，然后在命令行中执行以下步骤：

1. **创建 Django 项目并配置 Poetry**：

```bash
# 创建一个新的 Django 项目目录
mkdir my_django_project
cd my_django_project

# 使用 Poetry 创建虚拟环境
poetry init -n

# 安装 Django
poetry add django

# 创建 Django 项目
poetry run django-admin startproject my_project .
```

2. **安装并配置 Django REST framework 和 PostgreSQL**：

```bash
# 安装 Django REST framework 和 PostgreSQL 连接库
poetry add djangorestframework psycopg2-binary

# 在 settings.py 中配置 'rest_framework' 和数据库连接
```

编辑 `my_project/settings.py` 文件：

```python
# my_project/settings.py

INSTALLED_APPS = [
    ...
    'rest_framework',
    'my_app',  # 添加你的应用
]

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'my_database',  # 数据库名称
        'USER': 'my_user',      # 数据库用户名
        'PASSWORD': 'my_password',  # 数据库密码
        'HOST': 'localhost',    # 数据库主机地址
        'PORT': '5432',         # 数据库端口
    }
}
```

3. **创建 Django 应用**：

```bash
# 创建一个新的 Django 应用
poetry run python manage.py startapp my_app
```

### 步骤 2: 编写 Django 应用中的视图和模型

4. **定义模型**：

编辑 `my_app/models.py` 文件：

```python
# my_app/models.py
from django.db import models

class MyModel(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField()

    def __str__(self):
        return self.name
```

5. **创建序列化器**：

在 `my_app` 目录下创建 `serializers.py` 文件：

```python
# my_app/serializers.py
from rest_framework import serializers
from .models import MyModel

class MyModelSerializer(serializers.ModelSerializer):
    class Meta:
        model = MyModel
        fields = '__all__'
```

6. **定义视图**：

编辑 `my_app/views.py` 文件：

```python
# my_app/views.py
from rest_framework import generics
from .models import MyModel
from .serializers import MyModelSerializer

class MyModelListView(generics.ListCreateAPIView):
    queryset = MyModel.objects.all()
    serializer_class = MyModelSerializer

class MyModelDetailView(generics.RetrieveUpdateDestroyAPIView):
    queryset = MyModel.objects.all()
    serializer_class = MyModelSerializer
```

7. **配置 URL 路由**：

编辑 `my_project/urls.py` 文件：

```python
# my_project/urls.py
from django.urls import path, include

urlpatterns = [
    path('api/', include('my_app.urls')),
]
```

在 `my_app` 目录下创建 `urls.py` 文件：

```python
# my_app/urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('mymodel/', views.MyModelListView.as_view(), name='mymodel-list'),
    path('mymodel/<int:pk>/', views.MyModelDetailView.as_view(), name='mymodel-detail'),
]
```

### 步骤 3: 生成和应用数据库迁移

8. **生成迁移文件并应用迁移**：

```bash
# 生成迁移文件
poetry run python manage.py makemigrations

# 应用迁移
poetry run python manage.py migrate
```

### 步骤 4: 运行开发服务器

9. **运行开发服务器**：

```bash
poetry run python manage.py runserver
```

现在你可以打开浏览器并访问 `http://127.0.0.1:8000/api/mymodel/` 来查看和操作 `MyModel` 数据。

### 完整的文件结构

以下是项目的文件结构：

```
my_django_project/
├── my_app/
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── migrations/
│   │   ├── __init__.py
│   ├── models.py
│   ├── serializers.py
│   ├── tests.py
│   ├── urls.py
│   └── views.py
├── my_project/
│   ├── __init__.py
│   ├── asgi.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
├── manage.py
└── pyproject.toml
```

这样你就有了一个完整的 Django 项目，它使用 Poetry 管理依赖，Django REST framework 提供 API 支持，PostgreSQL 作为数据库后端。你可以根据需要扩展和修改这个项目。

要在 Django 中自动生成数据库迁移并在迁移时初始化写入数据，可以按照以下步骤进行。这个过程包括创建和编辑迁移文件，以便在迁移应用时执行初始化数据的逻辑。

### 步骤 1: 创建模型和生成迁移文件

1. **定义模型**：

在 `my_app/models.py` 文件中定义你的模型：

```python
# my_app/models.py
from django.db import models

class MyModel(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField()

    def __str__(self):
        return self.name
```

2. **生成迁移文件**：

运行以下命令生成迁移文件：

```bash
poetry run python manage.py makemigrations
```

### 步骤 2: 编辑迁移文件以初始化数据

找到生成的迁移文件（通常位于 `my_app/migrations/` 目录中），并编辑该文件以添加初始化数据的逻辑。

假设生成的迁移文件为 `0001_initial.py`：

```python
# my_app/migrations/0001_initial.py
from django.db import migrations, models

def init_data(apps, schema_editor):
    MyModel = apps.get_model('my_app', 'MyModel')
    initial_data = [
        {'name': 'Item 1', 'description': 'Description for Item 1'},
        {'name': 'Item 2', 'description': 'Description for Item 2'},
        {'name': 'Item 3', 'description': 'Description for Item 3'},
    ]
    for data in initial_data:
        MyModel.objects.create(**data)

class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='MyModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
            ],
        ),
        migrations.RunPython(init_data),
    ]
```

### 步骤 3: 应用迁移

运行以下命令来应用迁移：

```bash
poetry run python manage.py migrate
```

### 完整项目示例

以下是项目的完整代码和配置示例：

#### 文件结构：

```
my_django_project/
├── my_app/
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── migrations/
│   │   ├── __init__.py
│   │   └── 0001_initial.py
│   ├── models.py
│   ├── serializers.py
│   ├── tests.py
│   ├── urls.py
│   └── views.py
├── my_project/
│   ├── __init__.py
│   ├── asgi.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
├── manage.py
└── pyproject.toml
```

#### `my_project/settings.py`:

```python
# my_project/settings.py

INSTALLED_APPS = [
    ...
    'rest_framework',
    'my_app',  # 添加你的应用
]

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'my_database',  # 数据库名称
        'USER': 'my_user',      # 数据库用户名
        'PASSWORD': 'my_password',  # 数据库密码
        'HOST': 'localhost',    # 数据库主机地址
        'PORT': '5432',         # 数据库端口
    }
}
```

#### `my_app/models.py`:

```python
# my_app/models.py
from django.db import models

class MyModel(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField()

    def __str__(self):
        return self.name
```

#### `my_app/migrations/0001_initial.py`:

```python
# my_app/migrations/0001_initial.py
from django.db import migrations, models

def init_data(apps, schema_editor):
    MyModel = apps.get_model('my_app', 'MyModel')
    initial_data = [
        {'name': 'Item 1', 'description': 'Description for Item 1'},
        {'name': 'Item 2', 'description': 'Description for Item 2'},
        {'name': 'Item 3', 'description': 'Description for Item 3'},
    ]
    for data in initial_data:
        MyModel.objects.create(**data)

class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='MyModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
            ],
        ),
        migrations.RunPython(init_data),
    ]
```

#### `my_app/views.py`:

```python
# my_app/views.py
from rest_framework import generics
from .models import MyModel
from .serializers import MyModelSerializer

class MyModelListView(generics.ListCreateAPIView):
    queryset = MyModel.objects.all()
    serializer_class = MyModelSerializer

class MyModelDetailView(generics.RetrieveUpdateDestroyAPIView):
    queryset = MyModel.objects.all()
    serializer_class = MyModelSerializer
```

#### `my_app/serializers.py`:

```python
# my_app/serializers.py
from rest_framework import serializers
from .models import MyModel

class MyModelSerializer(serializers.ModelSerializer):
    class Meta:
        model = MyModel
        fields = '__all__'
```

#### `my_app/urls.py`:

```python
# my_app/urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('mymodel/', views.MyModelListView.as_view(), name='mymodel-list'),
    path('mymodel/<int:pk>/', views.MyModelDetailView.as_view(), name='mymodel-detail'),
]
```

#### `my_project/urls.py`:

```python
# my_project/urls.py
from django.urls import path, include

urlpatterns = [
    path('api/', include('my_app.urls')),
]
```

### 运行项目

执行以下命令来运行项目：

```bash
# 生成迁移文件
poetry run python manage.py makemigrations

# 应用迁移并初始化数据
poetry run python manage.py migrate

# 运行开发服务器
poetry run python manage.py runserver
```

现在，你的 Django 项目已经设置完毕，并且在数据库迁移时会自动初始化数据。

在 Django 中，数据库迁移可以自动生成，并且可以在迁移时初始化写入数据。下面是完整的步骤和代码示例，展示如何生成迁移文件并在迁移时初始化数据。

### 步骤 1: 创建 Django 项目并配置 Poetry

首先，确保你已经安装了 Poetry 和 PostgreSQL，然后在命令行中执行以下步骤：

```bash
# 创建一个新的 Django 项目目录
mkdir my_django_project
cd my_django_project

# 使用 Poetry 创建虚拟环境
poetry init -n

# 安装 Django
poetry add django

# 创建 Django 项目
poetry run django-admin startproject my_project .
```

### 步骤 2: 安装并配置 Django REST framework 和 PostgreSQL

继续在命令行中执行以下步骤：

```bash
# 安装 Django REST framework 和 PostgreSQL 连接库
poetry add djangorestframework psycopg2-binary

# 在 settings.py 中配置 'rest_framework' 和数据库连接
```

编辑 `my_project/settings.py` 文件：

```python
# my_project/settings.py

INSTALLED_APPS = [
    ...
    'rest_framework',
    'my_app',  # 添加你的应用
]

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'my_database',  # 数据库名称
        'USER': 'my_user',      # 数据库用户名
        'PASSWORD': 'my_password',  # 数据库密码
        'HOST': 'localhost',    # 数据库主机地址
        'PORT': '5432',         # 数据库端口
    }
}
```

### 步骤 3: 创建 Django 应用

继续在命令行中执行以下步骤：

```bash
# 创建一个新的 Django 应用
poetry run python manage.py startapp my_app
```

### 步骤 4: 编写 Django 应用中的视图和模型

1. **定义模型**：

编辑 `my_app/models.py` 文件：

```python
# my_app/models.py
from django.db import models

class MyModel(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField()

    def __str__(self):
        return self.name
```

2. **创建序列化器**：

在 `my_app` 目录下创建 `serializers.py` 文件：

```python
# my_app/serializers.py
from rest_framework import serializers
from .models import MyModel

class MyModelSerializer(serializers.ModelSerializer):
    class Meta:
        model = MyModel
        fields = '__all__'
```

3. **定义视图**：

编辑 `my_app/views.py` 文件：

```python
# my_app/views.py
from rest_framework import generics
from .models import MyModel
from .serializers import MyModelSerializer

class MyModelListView(generics.ListCreateAPIView):
    queryset = MyModel.objects.all()
    serializer_class = MyModelSerializer

class MyModelDetailView(generics.RetrieveUpdateDestroyAPIView):
    queryset = MyModel.objects.all()
    serializer_class = MyModelSerializer
```

4. **配置 URL 路由**：

编辑 `my_project/urls.py` 文件：

```python
# my_project/urls.py
from django.urls import path, include

urlpatterns = [
    path('api/', include('my_app.urls')),
]
```

在 `my_app` 目录下创建 `urls.py` 文件：

```python
# my_app/urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('mymodel/', views.MyModelListView.as_view(), name='mymodel-list'),
    path('mymodel/<int:pk>/', views.MyModelDetailView.as_view(), name='mymodel-detail'),
]
```

### 步骤 5: 生成迁移文件并初始化数据

1. **生成迁移文件**：

```bash
poetry run python manage.py makemigrations my_app
```

2. **编辑迁移文件以初始化数据**：

找到生成的迁移文件（通常位于应用程序的 `migrations` 目录中），并编辑该文件。你可以在 `operations` 列表中添加一个 `RunPython` 操作，以执行初始化数据的逻辑。

```python
# my_app/migrations/0001_initial.py
from django.db import migrations, models

def init_data(apps, schema_editor):
    MyModel = apps.get_model('my_app', 'MyModel')
    initial_data = [
        {'name': 'Item 1', 'description': 'Description for Item 1'},
        {'name': 'Item 2', 'description': 'Description for Item 2'},
        {'name': 'Item 3', 'description': 'Description for Item 3'},
    ]
    for data in initial_data:
        MyModel.objects.create(**data)

class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='MyModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
            ],
        ),
        migrations.RunPython(init_data),
    ]
```

3. **运行迁移**：

```bash
poetry run python manage.py migrate
```

### 步骤 6: 运行开发服务器

1. **运行开发服务器**：

```bash
poetry run python manage.py runserver
```

现在你可以打开浏览器并访问 `http://127.0.0.1:8000/api/mymodel/` 来查看和操作 `MyModel` 数据。

### 完整的文件结构

以下是项目的文件结构：

```
my_django_project/
├── my_app/
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── migrations/
│   │   ├── 0001_initial.py
│   │   ├── __init__.py
│   ├── models.py
│   ├── serializers.py
│   ├── tests.py
│   ├── urls.py
│   └── views.py
├── my_project/
│   ├── __init__.py
│   ├── asgi.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
├── manage.py
└── pyproject.toml
```

通过上述步骤，你已经成功创建了一个 Django 项目，并在数据库迁移时自动写入初始数据。这样，当你运行迁移时，初始数据将被写入数据库。

在 Django 项目中，若要在数据库迁移时写入初始化数据，可以采用更加模块化和可扩展的方法。这样的方法不仅有利于维护和扩展，还可以避免在单一迁移文件中进行过多操作。

以下是一个推荐的、更可扩展的解决方案：

### 使用单独的数据迁移文件

将初始化数据迁移分离出来，放到一个单独的迁移文件中。这使得迁移文件更加清晰和易于维护。

### 步骤 1: 定义模型

确保你的模型定义已经完成。以下是一个示例模型：

```python
# my_app/models.py

from django.db import models

class MyModel(models.Model):
    name = models.CharField(max_length=100)
    description = models.TextField()

    def __str__(self):
        return self.name
```

### 步骤 2: 创建初始迁移文件

运行以下命令以创建初始迁移文件：

```bash
poetry run python manage.py makemigrations my_app
```

### 步骤 3: 创建一个单独的数据迁移文件

运行以下命令以创建一个新的空迁移文件：

```bash
poetry run python manage.py makemigrations --empty --name initial_data my_app
```

这将创建一个空的迁移文件，你可以在其中添加初始化数据。

### 步骤 4: 编辑数据迁移文件以添加初始数据

找到生成的迁移文件（通常位于 `my_app/migrations/0002_initial_data.py`），并编辑该文件以包含 `RunPython` 操作。

```python
# my_app/migrations/0002_initial_data.py

from django.db import migrations

def create_initial_data(apps, schema_editor):
    MyModel = apps.get_model('my_app', 'MyModel')
    initial_data = [
        {'name': 'Item 1', 'description': 'Description for Item 1'},
        {'name': 'Item 2', 'description': 'Description for Item 2'},
        {'name': 'Item 3', 'description': 'Description for Item 3'},
    ]
    for data in initial_data:
        MyModel.objects.create(**data)

class Migration(migrations.Migration):

    dependencies = [
        ('my_app', '0001_initial'),  # 依赖于初始迁移
    ]

    operations = [
        migrations.RunPython(create_initial_data),
    ]
```

### 步骤 5: 应用迁移

运行以下命令以应用迁移，并在数据库中创建模型和初始化数据：

```bash
poetry run python manage.py migrate
```

### 这样做的优点：

1. **可维护性**：将数据迁移和模型迁移分离，使得迁移文件更容易理解和维护。
2. **可扩展性**：如果将来需要添加更多的初始化数据或修改现有的数据，只需创建一个新的迁移文件，而不是修改现有的迁移文件。
3. **清晰性**：单独的数据迁移文件清晰地展示了数据的初始化过程，便于追踪和管理。

### 总结

通过将数据初始化迁移分离到单独的迁移文件中，可以使项目更加模块化、可维护和易于扩展。这种方法不仅适用于初始数据的插入，也适用于以后需要插入的其他初始化数据。

下面是一个完整的示例代码，包括创建序列化器和视图：

```python
# my_app/serializers.py

from rest_framework import serializers
from .models import MyModel

class MyModelSerializer(serializers.ModelSerializer):
    class Meta:
        model = MyModel
        fields = '__all__'
```

```python
# my_app/views.py

from rest_framework import generics
from .models import MyModel
from .serializers import MyModelSerializer

class MyModelListCreateView(generics.ListCreateAPIView):
    queryset = MyModel.objects.all()
    serializer_class = MyModelSerializer
```

```python
# my_app/urls.py

from django.urls import path
from .views import MyModelListCreateView

urlpatterns = [
    path('mymodels/', MyModelListCreateView.as_view(), name='mymodel-list-create'),
]
```

在这个示例中，我们假设 `MyModel` 是你的模型，具有一些字段，并且你想要一个用于列出和创建 `MyModel` 实例的 API 视图。`MyModelSerializer` 是序列化器，它将 `MyModel` 实例序列化为 JSON 格式的数据。`MyModelListCreateView` 是 API 视图，它继承自 Django REST Framework 的 `ListCreateAPIView` 类，该类提供了列出和创建 API 资源的功能。

记得在项目的主 URL 配置文件中包含这个应用程序的 URL 配置文件：

```python
# my_project/urls.py

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include('my_app.urls')),
]
```

这样就完成了创建序列化器和视图的过程。通过这些代码，你可以在 `api/mymodels/` 路径下访问列出和创建 `MyModel` 实例的 API。

如果数据表中存储的是正则表达式，并且你希望在模型中使用这些正则表达式进行校验，你可以创建一个自定义的校验器，在模型字段上使用该校验器，并在保存模型实例时应用该校验器。下面是一个示例：

```python
# my_app/validators.py

import re
from django.core.exceptions import ValidationError

def validate_with_regex(value, regex):
    # 在这里实现校验逻辑
    # value 是字段的值，regex 是存储在数据表中的正则表达式

    if not re.match(regex, value):
        raise ValidationError('该值不符合正则表达式要求')

    # 如果校验成功，可以不返回任何内容
```

然后，在模型中使用这个自定义的校验器：

```python
# my_app/models.py

from django.db import models
from .validators import validate_with_regex

class YourModel(models.Model):
    your_field = models.CharField(max_length=100, validators=[validate_with_regex])

    # 其他字段和方法...
```

在这个示例中，`validate_with_regex` 是一个自定义的校验器函数，它接受两个参数：`value` 是字段的值，`regex` 是存储在数据表中的正则表达式。校验器使用 `re.match` 函数来检查字段的值是否符合正则表达式的要求。如果不符合，则抛出 `ValidationError` 异常。

然后，将该校验器应用到你的模型字段上，只需在字段定义时将其添加到 `validators` 参数中即可。每当你尝试保存模型实例时，该校验器都会自动执行，并根据存储的正则表达式对字段的值进行校验。

这种方法使得你可以使用存储在数据库中的正则表达式来校验模型字段的值，同时也可以根据需要定义不同的校验逻辑。
