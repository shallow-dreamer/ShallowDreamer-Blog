---
layout:     post
title:      "找到第一个错误的版本"
subtitle:   "使用二分算法"
date:       2023-04-21
author:     " Shallow Dreamer "
header-img: "img/post-bg-js-version.jpg"
tags:
    - 算法
    - 二分查找
    - js
    - leetcode
---

你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。

假设你有 n 个版本 [1, 2, ..., n]，你想找出导致之后所有版本出错的第一个错误的版本。

你可以通过调用 bool isBadVersion(version) 接口来判断版本号 version 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。

来源：力扣（LeetCode）
链接：https://leetcode.cn/problems/first-bad-version
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

示例：

```
输入：n = 5, bad = 4
输出：4
解释：
调用 isBadVersion(3) -> false 
调用 isBadVersion(5) -> true 
调用 isBadVersion(4) -> true
所以，4 是第一个错误的版本。

输入：n = 1, bad = 1
输出：1
```

思路：

判断left + （right - 1) / 2 的版本是否为错误的版本，是就将其赋给right，否则赋给left，进而缩小遍历范围，循环直到相邻版本不一致为止

代码：

```js
/**
 * Definition for isBadVersion()
 * 
 * @param {integer} version number
 * @return {boolean} whether the version is bad
 * isBadVersion = function(version) {
 *     ...
 * };
 */

/**
 * @param {function} isBadVersion()
 * @return {function}
 */
var solution = function(isBadVersion) {
    /**
     * @param {integer} n Total versions
     * @return {integer} The first bad version
     */
    return function(n) {
        let left = 1
        let right = n
        while(left <= right){
            let p = Math.floor(left + (right - left) / 2)
            if(isBadVersion(left)){
                return left
            }
            if(isBadVersion(p)){
                right = p - 1
            }else{
                left = p + 1
            }
        }
        return left
    };
};
```
