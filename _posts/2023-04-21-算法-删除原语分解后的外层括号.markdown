---
layout:     post
title:      "删除原语分解后的外层括号"
subtitle:   "使用js"
date:       2023-04-21
author:     " Shallow Dreamer "
header-img: "img/post-bg-js-version.jpg"
tags:
    - 算法
    - js
    - leetcode
---

有效括号字符串为空 ""、"(" + A + ")" 或 A + B ，其中 A 和 B 都是有效的括号字符串，+ 代表字符串的连接。

例如，""，"()"，"(())()" 和 "(()(()))" 都是有效的括号字符串。
如果有效字符串 s 非空，且不存在将其拆分为 s = A + B 的方法，我们称其为原语（primitive），其中 A 和 B 都是非空有效括号字符串。

给出一个非空有效字符串 s，考虑将其进行原语化分解，使得：s = P_1 + P_2 + ... + P_k，其中 P_i 是有效括号字符串原语。

对 s 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回 s 

来源：力扣（LeetCode）
链接：https://leetcode.cn/problems/remove-outermost-parentheses
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

示例：

```
输入：s = "(()())(())(()(()))"
输出："()()()()(())"
解释：
输入字符串为 "(()())(())(()(()))"，原语化分解得到 "(()())" + "(())" + "(()(()))"，
删除每个部分中的最外层括号后得到 "()()" + "()" + "()(())" = "()()()()(())"。

来源：力扣（LeetCode）
链接：https://leetcode.cn/problems/remove-outermost-parentheses
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
```

------

#### 解法一

思路：

1. 假设值a为0，res为空数组，遍历字符串，当遇到"("时a++，并且判断a是否大于0，如果大于则证明不是最外层"("，将其添加到结果res中，否则是最外层"("，则不添加
2. 当遇到")"时--a，并且判断a是否大于0，如果大于则证明不是最外层")"，添加到res，否则不添加
3. 将res转换成字符串输出

```js
var removeOuterParenthese = function(s){
    let a = 0
    let res = []
    for(i = 0;i < s.length;i++){
        if(s[i] == "(" && a++ > 0){
            res.push("(")
        }
        if(s[i] == ")" && --a > 0){
            res.push(")")
        }
        return res.join("")
    }
}
removeOuterParenthese("((()))((()))(())()")
```
